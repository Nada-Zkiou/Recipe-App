# Scalar definition for DateTime
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# Query operations for retrieving data
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "Get a list of all recipes."
    getRecipes: [Recipe!]!

    "Get a list of recipes belonging to the currently authenticated user."
    getUserRecipes: [Recipe!]!

    "Get a specific recipe by ID."
    getRecipe(id: ID!): Recipe

    "Search for recipes by title."
    searchRecipe(title: String!): [Recipe!]!

    "Get recipes of a specific user by their ID."
    getUserProfileRecipes(userId: ID!): [Recipe!]!
}

# User type representing an account
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

# Recipe type representing a recipe
type Recipe {
    id: ID!
    user_id: ID!
    title: String!
    ingredients: String!
    steps: String!
    tags: [String]
    image_path: String
    created_at: DateTime!
    updated_at: DateTime!
    user: User
    isFavorited: Boolean! @field(resolver: "App\\GraphQL\\Resolvers\\RecipeResolver@isFavorited")
    averageRating: Float @field(resolver: "App\\GraphQL\\Resolvers\\RecipeResolver@averageRating")
    userRating: Int @field(resolver: "App\\GraphQL\\Resolvers\\RecipeResolver@userRating")
}

# Input types for creating and updating recipes
input CreateRecipeInput {
    title: String!
    ingredients: String!
    steps: String!
    tags: [String]
    image_path: String
}

input UpdateRecipeInput {
    title: String
    ingredients: String
    steps: String
    tags: [String]
    image_path: String
}

# Input types for user registration and login
input RegisterInput {
    name: String!
    email: String!
    password: String!
    password_confirmation: String!
}

input LoginInput {
    email: String!
    password: String!
}

# Response type for login operation
type LoginResponse {
    user: User
    token: String
}

# Mutation operations
type Mutation {
    "Register a new user."
    register(input: RegisterInput!): User

    "Login a user and return an authentication token."
    login(input: LoginInput!): LoginResponse

    "Logout the current authenticated user."
    logout: Boolean

    "Create a new recipe."
    createRecipe(input: CreateRecipeInput!): Recipe

    "Update an existing recipe."
    updateRecipe(id: ID!, input: UpdateRecipeInput!): Recipe

    "Delete a recipe."
    deleteRecipe(id: ID!): Recipe

    "Toggle the favorite status of a recipe."
    toggleFavorite(recipeId: ID!): Boolean!
    @field(resolver: "App\\GraphQL\\Resolvers\\RecipeResolver@toggleFavorite")

    "Rate a recipe."
    rateRecipe(recipeId: ID!, rating: Int!): Boolean!
    @field(resolver: "App\\GraphQL\\Resolvers\\RecipeResolver@rateRecipe")
}
